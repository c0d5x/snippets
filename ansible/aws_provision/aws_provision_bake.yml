# variables:
#   warfile
#   instance_type
#   security_group
#   image
#   region
#   keypair


# ansible-playbook aws_provision_bake.yml -e instance_type=t2.micro -e security_group=pocdeploy -e image=ami-18d98a78 -e keypair=gl-josehidalgo-pub-ssh -e warfile=omnipollo_v1.war


---
  - name: Provision an EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning
    vars:
      count: 1

    tasks:
      - name: Download WAR file
        s3:
            bucket: josewarfiles
            object: "{{ warfile }}"
            dest: "./files/{{ warfile }}"
            mode: get

      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: "{{warfile}}"

      - name: Adding new instance to group for configuration
        add_host: hostname={{ item.public_ip }} groupname="deployed"
        with_items: "{{ ec2.instances }}"

      - name: Set instance id globally
        set_fact: instanceid={{ ec2.instances[0].id }}

      - debug: msg={{ instanceid }}

      - name: Wait for WinRM to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=5985 
                      state=started
        with_items: "{{ ec2.instances }}"

  - hosts: deployed
    gather_facts: false
    tasks:
      - name: Stop tomcat
        win_service: name=Tomcat8 state=stopped

      - name: Copy WAR to app servers
        win_copy:
            src: "./files/{{ warfile }}"
            dest: "c:/tomcat8/webapps/{{ warfile }}"

      - name: Enable Tomcat service
        win_service: name=Tomcat8 state=started start_mode=auto

  - hosts: localhost
    connection: local
    gather_facts: False
    tasks:
      - name: Bake AMI
        shell: aws ec2 create-image --instance-id "{{ instanceid }}" --name "{{ warfile }}"|jq -r '.ImageId'
        register: newami
      - debug: msg={{ newami.stdout }}
      - name: Wait for new ami
        command: aws ec2 wait image-available --image-ids "{{ newami.stdout }}"
      - name: Terminate modeling instance
        command: aws ec2 terminate-instances --instance-ids "{{ instanceid }}"

